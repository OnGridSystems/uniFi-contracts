{
  "address": "0x82E63e9F4de147BDDD25bB00535d8245B432592C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeDurationDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yieldRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_earlyUnstakeFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestTime",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "early",
          "type": "bool"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allocatedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyUnstakeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestedYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastHarvestTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestableYield",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getStakesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDurationDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestedYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastHarvestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakesOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unallocatedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnallocatedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf195ffebdfdb4fa69c0120180f414f402e395cad06e4c9059f706ba4c2a77f41",
  "receipt": {
    "to": null,
    "from": "0x28bB521929108C012bBEC8D36A156Cf9F8e3272c",
    "contractAddress": "0x82E63e9F4de147BDDD25bB00535d8245B432592C",
    "transactionIndex": 0,
    "gasUsed": "1201813",
    "logsBloom": "0x
    "blockHash": "0xe410955f4d8e8111fe2d4a8682dde82a790d546b29638d6ccb8ee27a2edf0421",
    "transactionHash": "0xf195ffebdfdb4fa69c0120180f414f402e395cad06e4c9059f706ba4c2a77f41",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16880439,
        "transactionHash": "0xf195ffebdfdb4fa69c0120180f414f402e395cad06e4c9059f706ba4c2a77f41",
        "address": "0x82E63e9F4de147BDDD25bB00535d8245B432592C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000028bb521929108c012bbec8d36a156cf9f8e3272c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe410955f4d8e8111fe2d4a8682dde82a790d546b29638d6ccb8ee27a2edf0421"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16880439,
        "transactionHash": "0xf195ffebdfdb4fa69c0120180f414f402e395cad06e4c9059f706ba4c2a77f41",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000028bb521929108c012bbec8d36a156cf9f8e3272c",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000801746d48b1c000000000000000000000000000000000000000000000000000e158f92671f0c000000000000000000000000000000000000000000000000e1816aac12c0f837910000000000000000000000000000000000000000000000000d95784b9293f0000000000000000000000000000000000000000000000000e181eac35995835391",
        "logIndex": 1,
        "blockHash": "0xe410955f4d8e8111fe2d4a8682dde82a790d546b29638d6ccb8ee27a2edf0421"
      }
    ],
    "blockNumber": 16880439,
    "cumulativeGasUsed": "1201813",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3a96F852Aa269bC55f491908168d75b023DbdeFB",
    3,
    1105,
    1105
  ],
  "solcInputHash": "d41372e44e3c6aba9e00fecba0c293df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeDurationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yieldRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyUnstakeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestTime\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allocatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyUnstakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestableYield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getStakesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDurationDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unallocatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnallocatedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"the constructor arguments:\",\"params\":{\"_earlyUnstakeFee\":\"fee for unstaking before stake expiration\",\"_stakeDurationDays\":\"the stake duration in days\",\"_token\":\"address of token - the same accepted for staking and used to pay rewards\",\"_yieldRate\":\"reward rate in basis points (1/10000)\"}},\"getStake(address,uint256)\":{\"details\":\"get the individual stake parameters of the user\",\"params\":{\"_stakeId\":\"stake index\",\"_userAddress\":\"account of staker\"},\"returns\":{\"endTime\":\"the time when unstaking (w.o. penalties) becomes possible\",\"harvestableYield\":\"The unlocked part of yield available for harvesting\",\"harvestedYield\":\"The part of yield user harvested already\",\"lastHarvestTime\":\"The time of last harvest event\",\"staked\":\"the status of stake\",\"stakedAmount\":\"the number of deposited tokens\",\"startTime\":\"the moment of stake start\",\"totalYield\":\"entire yield for the stake (totally released on endTime)\"}},\"getStakesLength(address)\":{\"details\":\"get the count of user's stakes. Used on frontend to iterate and display individual stakes\",\"params\":{\"_userAddress\":\"account of staker\"},\"returns\":{\"_0\":\"stakes\"}},\"harvest(uint256)\":{\"details\":\"harvest accumulated rewards. Can be called many times.\",\"params\":{\"_stakeId\":\"Id of the stake\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint256)\":{\"details\":\"submit the stake\",\"params\":{\"_amount\":\"amount of tokens to be transferred from user's account\"}},\"start()\":{\"details\":\"start accepting new stakes. Called only by the owner\"},\"stop()\":{\"details\":\"stop accepting new stakes. Called only by the owner\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unallocatedTokens()\":{\"details\":\"get the amount of available tokens neither staked nor allocated for rewards\",\"returns\":{\"_0\":\"amount of unallocated tokens\"}},\"unstake(uint256)\":{\"details\":\"withdraw the `body` of user's stake. Can be called only once\",\"params\":{\"_stakeId\":\"Id of the stake\"}},\"withdrawUnallocatedTokens(address,uint256)\":{\"details\":\"the owner is able to withdraw excess tokens to collect early unstake fees or to reuse unused funds suitable for assets rebalancing between staking contracts.\",\"params\":{\"_amount\":\"amount of tokens in atto (1e-18) units\",\"_to\":\"address who will receive the funds\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FixedStaking.sol\":\"FixedStaking\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/FixedStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FixedStaking is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // user deposits are recorded in StakeInfo[] stakes struct\\n    struct StakeInfo {\\n        // staked is true if deposit is staked and hasn't been unstaked.\\n        // After user claims his stake back, `staked` becomes false\\n        bool staked;\\n        // stakedAmount get recorded at the stake time and doesn't change.\\n        uint256 stakedAmount;\\n        uint256 startTime;\\n        // endTime and totalYield get calculated in advance at the moment of staking\\n        // endTime is the date when unstaking becomes possible (without penalties)\\n        uint256 endTime;\\n        // totalYield is a total value of rewards for the given stake.\\n        // Gets calculated on the stake start and doesnt' change\\n        // but the amount that user is able to withdraw gets gradually unlocked over time.\\n        uint256 totalYield;\\n        // The amount of yield user already harvested and the time of last harvest call.\\n        uint256 harvestedYield;\\n        uint256 lastHarvestTime;\\n    }\\n\\n    // If stakesOpen == true, the contract is operational and accepts new stakes.\\n    // Otherwise it allows just harvesting and unstaking.\\n    bool public stakesOpen;\\n\\n    // The token accepted for staking and used for rewards (The same token for both).\\n    IERC20 public token;\\n\\n    // struccture that stores the records of users' stakes\\n    mapping(address => StakeInfo[]) public stakes;\\n\\n    // the total number of staked tokens. Accounted separately to avoid mixing stake and reward balances\\n    uint256 public stakedTokens;\\n\\n    // The staking interval in days.\\n    // Early unstaking is possible but a fine is withheld.\\n    uint256 public stakeDurationDays;\\n\\n    // Fee for early unstake in basis points (1/10000)\\n    // If the user withdraws before stake expiration, he pays `earlyUnstakeFee`\\n    uint256 public earlyUnstakeFee;\\n\\n    // Reward that staker will receive for his stake\\n    // nominated in basis points (1/10000) of staked amount\\n    uint256 public yieldRate;\\n\\n    // Yield tokens reserved for existing stakes to pay on harvest.\\n    // The reward tokens get allocated at the moment of stake.\\n    uint256 public allocatedTokens;\\n\\n    event Stake(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 startTime, uint256 endTime);\\n\\n    event Unstake(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 startTime, uint256 endTime, bool early);\\n\\n    event Harvest(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 harvestTime);\\n\\n    /**\\n     * @dev the constructor arguments:\\n     * @param _token address of token - the same accepted for staking and used to pay rewards\\n     * @param _stakeDurationDays the stake duration in days\\n     * @param _yieldRate reward rate in basis points (1/10000)\\n     * @param _earlyUnstakeFee fee for unstaking before stake expiration\\n     */\\n    constructor(\\n        IERC20 _token,\\n        uint256 _stakeDurationDays,\\n        uint256 _yieldRate,\\n        uint256 _earlyUnstakeFee\\n    ) {\\n        token = _token;\\n        stakeDurationDays = _stakeDurationDays;\\n        yieldRate = _yieldRate;\\n        earlyUnstakeFee = _earlyUnstakeFee;\\n    }\\n\\n    /**\\n     * @dev the owner is able to withdraw excess tokens to collect early unstake fees or to reuse unused funds\\n     * suitable for assets rebalancing between staking contracts.\\n     * @param _to  address who will receive the funds\\n     * @param _amount amount of tokens in atto (1e-18) units\\n     */\\n    function withdrawUnallocatedTokens(address _to, uint256 _amount) public onlyOwner {\\n        require(unallocatedTokens() >= _amount, \\\"Not enough unallocatedTokens\\\");\\n        token.safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev start accepting new stakes. Called only by the owner\\n     */\\n    function start() public onlyOwner {\\n        stakesOpen = true;\\n    }\\n\\n    /**\\n     * @dev stop accepting new stakes. Called only by the owner\\n     */\\n    function stop() public onlyOwner {\\n        stakesOpen = false;\\n    }\\n\\n    /**\\n     * @dev submit the stake\\n     * @param _amount   amount of tokens to be transferred from user's account\\n     */\\n    function stake(uint256 _amount) public {\\n        require(stakesOpen, \\\"stake: not open\\\");\\n        // entire reward allocated for the user for this stake\\n        uint256 totalYield = _amount.mul(yieldRate).div(10000);\\n        require(unallocatedTokens() >= totalYield, \\\"stake: not enough allotted tokens to pay yield\\\");\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 startTime = _now();\\n        uint256 endTime = _now().add(stakeDurationDays.mul(1 days));\\n        stakes[msg.sender].push(\\n            StakeInfo({\\n                staked: true,\\n                stakedAmount: _amount,\\n                startTime: startTime,\\n                endTime: endTime,\\n                totalYield: totalYield,\\n                harvestedYield: 0,\\n                lastHarvestTime: startTime\\n            })\\n        );\\n        allocatedTokens = allocatedTokens.add(totalYield);\\n        stakedTokens = stakedTokens.add(_amount);\\n        emit Stake(msg.sender, getStakesLength(msg.sender), _amount, startTime, endTime);\\n    }\\n\\n    /**\\n     * @dev withdraw the `body` of user's stake. Can be called only once\\n     * @param _stakeId   Id of the stake\\n     */\\n    function unstake(uint256 _stakeId) public {\\n        (\\n            bool staked,\\n            uint256 stakedAmount,\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256 totalYield,\\n            uint256 harvestedYield,\\n            ,\\n            uint256 harvestableYield\\n        ) = getStake(msg.sender, _stakeId);\\n        bool early;\\n        require(staked, \\\"Unstaked already\\\");\\n        if (_now() > endTime) {\\n            token.safeTransfer(msg.sender, stakedAmount);\\n            stakes[msg.sender][_stakeId].staked = false;\\n            stakedTokens = stakedTokens.sub(stakedAmount);\\n            early = false;\\n        } else {\\n            uint256 fee = stakedAmount.mul(earlyUnstakeFee).div(10000);\\n            uint256 amountToTransfer = stakedAmount.sub(fee);\\n            token.safeTransfer(msg.sender, amountToTransfer);\\n\\n            uint256 newTotalYield = harvestedYield.add(harvestableYield);\\n            allocatedTokens = allocatedTokens.sub(totalYield.sub(newTotalYield));\\n            stakes[msg.sender][_stakeId].staked = false;\\n            stakes[msg.sender][_stakeId].endTime = _now();\\n            stakes[msg.sender][_stakeId].totalYield = newTotalYield;\\n            stakedTokens = stakedTokens.sub(stakedAmount);\\n            early = true;\\n        }\\n\\n        emit Unstake(msg.sender, _stakeId, stakedAmount, startTime, endTime, early);\\n    }\\n\\n    /**\\n     * @dev harvest accumulated rewards. Can be called many times.\\n     * @param _stakeId   Id of the stake\\n     */\\n    function harvest(uint256 _stakeId) public {\\n        (, , , , , uint256 harvestedYield, , uint256 harvestableYield) = getStake(msg.sender, _stakeId);\\n        require(harvestableYield != 0, \\\"harvestableYield is zero\\\");\\n        token.safeTransfer(msg.sender, harvestableYield);\\n        allocatedTokens = allocatedTokens.sub(harvestableYield);\\n        stakes[msg.sender][_stakeId].harvestedYield = harvestedYield.add(harvestableYield);\\n        stakes[msg.sender][_stakeId].lastHarvestTime = _now();\\n        emit Harvest(msg.sender, _stakeId, harvestableYield, _now());\\n    }\\n\\n    /**\\n     * @dev get the amount of available tokens neither staked nor allocated for rewards\\n     * @return amount of unallocated tokens\\n     */\\n    function unallocatedTokens() public view returns (uint256) {\\n        return token.balanceOf(address(this)).sub(stakedTokens).sub(allocatedTokens);\\n    }\\n\\n    /**\\n     * @dev get the count of user's stakes. Used on frontend to iterate and display individual stakes\\n     * @param _userAddress account of staker\\n     * @return stakes\\n     */\\n    function getStakesLength(address _userAddress) public view returns (uint256) {\\n        return stakes[_userAddress].length;\\n    }\\n\\n    /**\\n     * @dev get the individual stake parameters of the user\\n     * @param _userAddress account of staker\\n     * @param _stakeId stake index\\n     * @return staked the status of stake\\n     * @return stakedAmount the number of deposited tokens\\n     * @return startTime the moment of stake start\\n     * @return endTime the time when unstaking (w.o. penalties) becomes possible\\n     * @return totalYield entire yield for the stake (totally released on endTime)\\n     * @return harvestedYield The part of yield user harvested already\\n     * @return lastHarvestTime The time of last harvest event\\n     * @return harvestableYield The unlocked part of yield available for harvesting\\n     */\\n    function getStake(address _userAddress, uint256 _stakeId)\\n        public\\n        view\\n        returns (\\n            bool staked,\\n            uint256 stakedAmount,\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256 totalYield, // Entire yield for the stake (totally released on endTime)\\n            uint256 harvestedYield, // The part of yield user harvested already\\n            uint256 lastHarvestTime, // The time of last harvest event\\n            uint256 harvestableYield // The unlocked part of yield available for harvesting\\n        )\\n    {\\n        StakeInfo memory _stake = stakes[_userAddress][_stakeId];\\n        staked = _stake.staked;\\n        stakedAmount = _stake.stakedAmount;\\n        startTime = _stake.startTime;\\n        endTime = _stake.endTime;\\n        totalYield = _stake.totalYield;\\n        harvestedYield = _stake.harvestedYield;\\n        lastHarvestTime = _stake.lastHarvestTime;\\n        if (_now() > endTime) {\\n            harvestableYield = totalYield.sub(harvestedYield);\\n        } else {\\n            harvestableYield = totalYield.mul(_now().sub(lastHarvestTime)).div(endTime.sub(startTime));\\n        }\\n    }\\n\\n    // Returns block.timestamp, overridable for test purposes.\\n    function _now() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0fbac31cd29796655f51407e5efef735c2bcd5e4f41c6ca814178968aeb0a9a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516113bd3803806113bd83398101604081905261002f916100ba565b6100383361006a565b600180546001600160a01b0319166001600160a01b039590951694909417909355600491909155600655600555610105565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156100d057600080fd5b84516001600160a01b03811681146100e757600080fd5b60208601516040870151606090970151919890975090945092505050565b6112a9806101146000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c80638da5cb5b116100ad578063cb913c8211610071578063cb913c8214610263578063cfd4766314610287578063ddc63262146102d7578063f2fde38b146102ea578063fc0c546a146102fd57600080fd5b80638da5cb5b146101f1578063909767d914610216578063a694fc3a1461023f578063be9a655514610252578063cb6290091461025a57600080fd5b8063296ee19f116100f4578063296ee19f1461017b5780632e17de7814610183578063584b62a1146101965780636999ac93146101e0578063715018a6146101e957600080fd5b80622f9569146101305780630711306d1461014c57806307da68f51461015557806313f063091461015f578063245acab214610172575b600080fd5b61013960075481565b6040519081526020015b60405180910390f35b61013960055481565b61015d610310565b005b61015d61016d3660046110a9565b610352565b61013960045481565b6101396103ee565b61015d6101913660046110f5565b610487565b6101a96101a43660046110a9565b610708565b6040805197151588526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610143565b61013960065481565b61015d610766565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610143565b61013961022436600461108e565b6001600160a01b031660009081526002602052604090205490565b61015d61024d3660046110f5565b61079c565b61015d6109c1565b61013960035481565b60005461027790600160a01b900460ff1681565b6040519015158152602001610143565b61029a6102953660046110a9565b610a00565b6040805198151589526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610143565b61015d6102e53660046110f5565b610b1a565b61015d6102f836600461108e565b610c60565b6001546101fe906001600160a01b031681565b6000546001600160a01b031633146103435760405162461bcd60e51b815260040161033a90611176565b60405180910390fd5b6000805460ff60a01b19169055565b6000546001600160a01b0316331461037c5760405162461bcd60e51b815260040161033a90611176565b806103856103ee565b10156103d35760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820756e616c6c6f6361746564546f6b656e7300000000604482015260640161033a565b6001546103ea906001600160a01b03168383610cfb565b5050565b6007546003546001546040516370a0823160e01b815230600482015260009361048293909261047c926001600160a01b03909116906370a082319060240160206040518083038186803b15801561044457600080fd5b505afa158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c919061110e565b90610d63565b905090565b600080600080600080600061049c3389610a00565b9750509650965096509650965096506000876104ed5760405162461bcd60e51b815260206004820152601060248201526f556e7374616b656420616c726561647960801b604482015260640161033a565b844211156105645760015461050c906001600160a01b03163389610cfb565b33600090815260026020526040812080548b90811061052d5761052d61125d565b60009182526020909120600790910201805460ff19169115159190911790556003546105599088610d63565b6003555060006106b0565b60006105876127106105816005548b610d7690919063ffffffff16565b90610d82565b905060006105958983610d63565b6001549091506105af906001600160a01b03163383610cfb565b60006105bb8686610d8e565b90506105d36105ca8883610d63565b60075490610d63565b60075533600090815260026020526040812080548e9081106105f7576105f761125d565b60009182526020909120600790910201805460ff19169115159190911790554233600090815260026020526040902080548e9081106106385761063861125d565b9060005260206000209060070201600301819055508060026000336001600160a01b03166001600160a01b031681526020019081526020016000208d815481106106845761068461125d565b60009182526020909120600460079092020101556003546106a5908b610d63565b600355506001925050505b60408051888152602081018890529081018690528115156060820152899033907fc27678b8d9d59c0688159890347f79df5b543dff3fcad311f8142181a3661c149060800160405180910390a3505050505050505050565b6002602052816000526040600020818154811061072457600080fd5b6000918252602090912060079091020180546001820154600283015460038401546004850154600586015460069096015460ff90951697509295509093909287565b6000546001600160a01b031633146107905760405162461bcd60e51b815260040161033a90611176565b61079a6000610d9a565b565b600054600160a01b900460ff166107e75760405162461bcd60e51b815260206004820152600f60248201526e39ba30b5b29d103737ba1037b832b760891b604482015260640161033a565b600061080461271061058160065485610d7690919063ffffffff16565b90508061080f6103ee565b10156108745760405162461bcd60e51b815260206004820152602e60248201527f7374616b653a206e6f7420656e6f75676820616c6c6f7474656420746f6b656e60448201526d1cc81d1bc81c185e481e5a595b1960921b606482015260840161033a565b60015461088c906001600160a01b0316333085610dea565b60045442906000906108ac906108a59062015180610d76565b4290610d8e565b336000908152600260208181526040808420815160e08101835260018082528185018c81529382018a815260608301898152608084018d815260a085018a815260c086018e815287548087018955978c5298909a2094516007968702909501805460ff1916951515959095178555955192840192909255519582019590955593516003850155905160048401559251600583015551600690910155549091506109559084610d8e565b6007556003546109659085610d8e565b60035533600090815260026020526040902054604080518681526020810185905290810183905233907f2720efa4b2dd4f3f8a347da3cbd290a522e9432da9072c5b8e6300496fdde2829060600160405180910390a350505050565b6000546001600160a01b031633146109eb5760405162461bcd60e51b815260040161033a90611176565b6000805460ff60a01b1916600160a01b179055565b6000806000806000806000806000600260008c6001600160a01b03166001600160a01b031681526020019081526020016000208a81548110610a4457610a4461125d565b60009182526020918290206040805160e0810182526007909302909101805460ff16151580845260018201549484018590526002820154928401839052600382015460608501819052600483015460808601819052600584015460a0870181905260069094015460c08701819052929f50959d50929b50919950929750919550909350905085610ad14290565b1115610ae857610ae18585610d63565b9150610b0c565b610b09610af58789610d63565b610581610b02864261047c565b8890610d76565b91505b509295985092959890939650565b600080610b273384610a00565b975050965050505050508060001415610b825760405162461bcd60e51b815260206004820152601860248201527f6861727665737461626c655969656c64206973207a65726f0000000000000000604482015260640161033a565b600154610b99906001600160a01b03163383610cfb565b600754610ba69082610d63565b600755610bb38282610d8e565b336000908152600260205260409020805485908110610bd457610bd461125d565b600091825260209091206005600790920201015542336000908152600260205260409020805485908110610c0a57610c0a61125d565b600091825260209091206007909102016006015582337f4534f107610758c3931de9ad1e176476fcfb8c74adf920167e1d54ee84fcfe7683426040805192835260208301919091520160405180910390a3505050565b6000546001600160a01b03163314610c8a5760405162461bcd60e51b815260040161033a90611176565b6001600160a01b038116610cef5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161033a565b610cf881610d9a565b50565b6040516001600160a01b038316602482015260448101829052610d5e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610e28565b505050565b6000610d6f8284611204565b9392505050565b6000610d6f82846111e5565b6000610d6f82846111c3565b6000610d6f82846111ab565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e229085906323b872dd60e01b90608401610d27565b50505050565b6000610e7d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610efa9092919063ffffffff16565b805190915015610d5e5780806020019051810190610e9b91906110d3565b610d5e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161033a565b6060610f098484600085610f11565b949350505050565b606082471015610f725760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161033a565b843b610fc05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161033a565b600080866001600160a01b03168587604051610fdc9190611127565b60006040518083038185875af1925050503d8060008114611019576040519150601f19603f3d011682016040523d82523d6000602084013e61101e565b606091505b509150915061102e828286611039565b979650505050505050565b60608315611048575081610d6f565b8251156110585782518084602001fd5b8160405162461bcd60e51b815260040161033a9190611143565b80356001600160a01b038116811461108957600080fd5b919050565b6000602082840312156110a057600080fd5b610d6f82611072565b600080604083850312156110bc57600080fd5b6110c583611072565b946020939093013593505050565b6000602082840312156110e557600080fd5b81518015158114610d6f57600080fd5b60006020828403121561110757600080fd5b5035919050565b60006020828403121561112057600080fd5b5051919050565b6000825161113981846020870161121b565b9190910192915050565b602081526000825180602084015261116281604085016020870161121b565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156111be576111be611247565b500190565b6000826111e057634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156111ff576111ff611247565b500290565b60008282101561121657611216611247565b500390565b60005b8381101561123657818101518382015260200161121e565b83811115610e225750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220f7251e153520845957c1159bd5d24d43d174330c4dee0a0adb1efab4df91e82264736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012b5760003560e01c80638da5cb5b116100ad578063cb913c8211610071578063cb913c8214610263578063cfd4766314610287578063ddc63262146102d7578063f2fde38b146102ea578063fc0c546a146102fd57600080fd5b80638da5cb5b146101f1578063909767d914610216578063a694fc3a1461023f578063be9a655514610252578063cb6290091461025a57600080fd5b8063296ee19f116100f4578063296ee19f1461017b5780632e17de7814610183578063584b62a1146101965780636999ac93146101e0578063715018a6146101e957600080fd5b80622f9569146101305780630711306d1461014c57806307da68f51461015557806313f063091461015f578063245acab214610172575b600080fd5b61013960075481565b6040519081526020015b60405180910390f35b61013960055481565b61015d610310565b005b61015d61016d3660046110a9565b610352565b61013960045481565b6101396103ee565b61015d6101913660046110f5565b610487565b6101a96101a43660046110a9565b610708565b6040805197151588526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610143565b61013960065481565b61015d610766565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610143565b61013961022436600461108e565b6001600160a01b031660009081526002602052604090205490565b61015d61024d3660046110f5565b61079c565b61015d6109c1565b61013960035481565b60005461027790600160a01b900460ff1681565b6040519015158152602001610143565b61029a6102953660046110a9565b610a00565b6040805198151589526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610143565b61015d6102e53660046110f5565b610b1a565b61015d6102f836600461108e565b610c60565b6001546101fe906001600160a01b031681565b6000546001600160a01b031633146103435760405162461bcd60e51b815260040161033a90611176565b60405180910390fd5b6000805460ff60a01b19169055565b6000546001600160a01b0316331461037c5760405162461bcd60e51b815260040161033a90611176565b806103856103ee565b10156103d35760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820756e616c6c6f6361746564546f6b656e7300000000604482015260640161033a565b6001546103ea906001600160a01b03168383610cfb565b5050565b6007546003546001546040516370a0823160e01b815230600482015260009361048293909261047c926001600160a01b03909116906370a082319060240160206040518083038186803b15801561044457600080fd5b505afa158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c919061110e565b90610d63565b905090565b600080600080600080600061049c3389610a00565b9750509650965096509650965096506000876104ed5760405162461bcd60e51b815260206004820152601060248201526f556e7374616b656420616c726561647960801b604482015260640161033a565b844211156105645760015461050c906001600160a01b03163389610cfb565b33600090815260026020526040812080548b90811061052d5761052d61125d565b60009182526020909120600790910201805460ff19169115159190911790556003546105599088610d63565b6003555060006106b0565b60006105876127106105816005548b610d7690919063ffffffff16565b90610d82565b905060006105958983610d63565b6001549091506105af906001600160a01b03163383610cfb565b60006105bb8686610d8e565b90506105d36105ca8883610d63565b60075490610d63565b60075533600090815260026020526040812080548e9081106105f7576105f761125d565b60009182526020909120600790910201805460ff19169115159190911790554233600090815260026020526040902080548e9081106106385761063861125d565b9060005260206000209060070201600301819055508060026000336001600160a01b03166001600160a01b031681526020019081526020016000208d815481106106845761068461125d565b60009182526020909120600460079092020101556003546106a5908b610d63565b600355506001925050505b60408051888152602081018890529081018690528115156060820152899033907fc27678b8d9d59c0688159890347f79df5b543dff3fcad311f8142181a3661c149060800160405180910390a3505050505050505050565b6002602052816000526040600020818154811061072457600080fd5b6000918252602090912060079091020180546001820154600283015460038401546004850154600586015460069096015460ff90951697509295509093909287565b6000546001600160a01b031633146107905760405162461bcd60e51b815260040161033a90611176565b61079a6000610d9a565b565b600054600160a01b900460ff166107e75760405162461bcd60e51b815260206004820152600f60248201526e39ba30b5b29d103737ba1037b832b760891b604482015260640161033a565b600061080461271061058160065485610d7690919063ffffffff16565b90508061080f6103ee565b10156108745760405162461bcd60e51b815260206004820152602e60248201527f7374616b653a206e6f7420656e6f75676820616c6c6f7474656420746f6b656e60448201526d1cc81d1bc81c185e481e5a595b1960921b606482015260840161033a565b60015461088c906001600160a01b0316333085610dea565b60045442906000906108ac906108a59062015180610d76565b4290610d8e565b336000908152600260208181526040808420815160e08101835260018082528185018c81529382018a815260608301898152608084018d815260a085018a815260c086018e815287548087018955978c5298909a2094516007968702909501805460ff1916951515959095178555955192840192909255519582019590955593516003850155905160048401559251600583015551600690910155549091506109559084610d8e565b6007556003546109659085610d8e565b60035533600090815260026020526040902054604080518681526020810185905290810183905233907f2720efa4b2dd4f3f8a347da3cbd290a522e9432da9072c5b8e6300496fdde2829060600160405180910390a350505050565b6000546001600160a01b031633146109eb5760405162461bcd60e51b815260040161033a90611176565b6000805460ff60a01b1916600160a01b179055565b6000806000806000806000806000600260008c6001600160a01b03166001600160a01b031681526020019081526020016000208a81548110610a4457610a4461125d565b60009182526020918290206040805160e0810182526007909302909101805460ff16151580845260018201549484018590526002820154928401839052600382015460608501819052600483015460808601819052600584015460a0870181905260069094015460c08701819052929f50959d50929b50919950929750919550909350905085610ad14290565b1115610ae857610ae18585610d63565b9150610b0c565b610b09610af58789610d63565b610581610b02864261047c565b8890610d76565b91505b509295985092959890939650565b600080610b273384610a00565b975050965050505050508060001415610b825760405162461bcd60e51b815260206004820152601860248201527f6861727665737461626c655969656c64206973207a65726f0000000000000000604482015260640161033a565b600154610b99906001600160a01b03163383610cfb565b600754610ba69082610d63565b600755610bb38282610d8e565b336000908152600260205260409020805485908110610bd457610bd461125d565b600091825260209091206005600790920201015542336000908152600260205260409020805485908110610c0a57610c0a61125d565b600091825260209091206007909102016006015582337f4534f107610758c3931de9ad1e176476fcfb8c74adf920167e1d54ee84fcfe7683426040805192835260208301919091520160405180910390a3505050565b6000546001600160a01b03163314610c8a5760405162461bcd60e51b815260040161033a90611176565b6001600160a01b038116610cef5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161033a565b610cf881610d9a565b50565b6040516001600160a01b038316602482015260448101829052610d5e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610e28565b505050565b6000610d6f8284611204565b9392505050565b6000610d6f82846111e5565b6000610d6f82846111c3565b6000610d6f82846111ab565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e229085906323b872dd60e01b90608401610d27565b50505050565b6000610e7d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610efa9092919063ffffffff16565b805190915015610d5e5780806020019051810190610e9b91906110d3565b610d5e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161033a565b6060610f098484600085610f11565b949350505050565b606082471015610f725760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161033a565b843b610fc05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161033a565b600080866001600160a01b03168587604051610fdc9190611127565b60006040518083038185875af1925050503d8060008114611019576040519150601f19603f3d011682016040523d82523d6000602084013e61101e565b606091505b509150915061102e828286611039565b979650505050505050565b60608315611048575081610d6f565b8251156110585782518084602001fd5b8160405162461bcd60e51b815260040161033a9190611143565b80356001600160a01b038116811461108957600080fd5b919050565b6000602082840312156110a057600080fd5b610d6f82611072565b600080604083850312156110bc57600080fd5b6110c583611072565b946020939093013593505050565b6000602082840312156110e557600080fd5b81518015158114610d6f57600080fd5b60006020828403121561110757600080fd5b5035919050565b60006020828403121561112057600080fd5b5051919050565b6000825161113981846020870161121b565b9190910192915050565b602081526000825180602084015261116281604085016020870161121b565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156111be576111be611247565b500190565b6000826111e057634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156111ff576111ff611247565b500290565b60008282101561121657611216611247565b500390565b60005b8381101561123657818101518382015260200161121e565b83811115610e225750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220f7251e153520845957c1159bd5d24d43d174330c4dee0a0adb1efab4df91e82264736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "the constructor arguments:",
        "params": {
          "_earlyUnstakeFee": "fee for unstaking before stake expiration",
          "_stakeDurationDays": "the stake duration in days",
          "_token": "address of token - the same accepted for staking and used to pay rewards",
          "_yieldRate": "reward rate in basis points (1/10000)"
        }
      },
      "getStake(address,uint256)": {
        "details": "get the individual stake parameters of the user",
        "params": {
          "_stakeId": "stake index",
          "_userAddress": "account of staker"
        },
        "returns": {
          "endTime": "the time when unstaking (w.o. penalties) becomes possible",
          "harvestableYield": "The unlocked part of yield available for harvesting",
          "harvestedYield": "The part of yield user harvested already",
          "lastHarvestTime": "The time of last harvest event",
          "staked": "the status of stake",
          "stakedAmount": "the number of deposited tokens",
          "startTime": "the moment of stake start",
          "totalYield": "entire yield for the stake (totally released on endTime)"
        }
      },
      "getStakesLength(address)": {
        "details": "get the count of user's stakes. Used on frontend to iterate and display individual stakes",
        "params": {
          "_userAddress": "account of staker"
        },
        "returns": {
          "_0": "stakes"
        }
      },
      "harvest(uint256)": {
        "details": "harvest accumulated rewards. Can be called many times.",
        "params": {
          "_stakeId": "Id of the stake"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint256)": {
        "details": "submit the stake",
        "params": {
          "_amount": "amount of tokens to be transferred from user's account"
        }
      },
      "start()": {
        "details": "start accepting new stakes. Called only by the owner"
      },
      "stop()": {
        "details": "stop accepting new stakes. Called only by the owner"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unallocatedTokens()": {
        "details": "get the amount of available tokens neither staked nor allocated for rewards",
        "returns": {
          "_0": "amount of unallocated tokens"
        }
      },
      "unstake(uint256)": {
        "details": "withdraw the `body` of user's stake. Can be called only once",
        "params": {
          "_stakeId": "Id of the stake"
        }
      },
      "withdrawUnallocatedTokens(address,uint256)": {
        "details": "the owner is able to withdraw excess tokens to collect early unstake fees or to reuse unused funds suitable for assets rebalancing between staking contracts.",
        "params": {
          "_amount": "amount of tokens in atto (1e-18) units",
          "_to": "address who will receive the funds"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1575,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakesOpen",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1578,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)181"
      },
      {
        "astId": 1584,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)1573_storage)dyn_storage)"
      },
      {
        "astId": 1586,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1588,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakeDurationDays",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1590,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "earlyUnstakeFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1592,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "yieldRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1594,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "allocatedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StakeInfo)1573_storage)dyn_storage": {
        "base": "t_struct(StakeInfo)1573_storage",
        "encoding": "dynamic_array",
        "label": "struct FixedStaking.StakeInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)181": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(StakeInfo)1573_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FixedStaking.StakeInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StakeInfo)1573_storage)dyn_storage"
      },
      "t_struct(StakeInfo)1573_storage": {
        "encoding": "inplace",
        "label": "struct FixedStaking.StakeInfo",
        "members": [
          {
            "astId": 1560,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "staked",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1562,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1564,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1566,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1568,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "totalYield",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1570,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "harvestedYield",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1572,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "lastHarvestTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}